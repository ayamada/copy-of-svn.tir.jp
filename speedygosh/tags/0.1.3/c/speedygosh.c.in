/* $Id$ */

/* See http://e.tir.jp/wiliki?speedygosh */

/* TODO: サーバが完全に起動する前にSIGINT等が外部から送られてきて
 *       途中終了する際の挙動を完全に実装しなくてはならない
 *       (現在は問答無用でSIGKILLを送ってしまっている)
 *       おそらく、一旦forkしてからsleepしつつ何回かシグナルを送る事で、
 *       gaucheを緊急停止モードで止める事が出来ると思う……が、
 *       それだとSIGKILLで止めるのと大して変わらないのでは？
 *       どうするのが良い？ */

/* TODO: speedygosh.cはlibspeedygoshを作る為のファイルとし、
 *       コマンド自体はmain.cから作るようにする(goshと同じ構造にしたい) */
 
/* TODO: LLM_MALLOCが失敗した対策をちゃんと書く
 *       (各関数の返り値がNULLだった時のコードがほとんど書かれてない) */

/* note: argvについて
 * - シェルから呼び出した場合は、自動的に引数が分解されて渡される。
 * -- { 自分自身, 引数1, 引数2, ... }
 * - スクリプトの先頭に#!で呼び出した場合は、以下のどれかになる。
 * -- #!の行に引数を書いていない場合
 * --- { 自分自身, スクリプトのpath, コマンドライン引数1, 引数2, ... }
 * -- #!の行に引数を書いた場合
 * --- { 自分自身, #!に書かれた、分解されてない引数全部, スクリプトのpath,
 *       コマンドライン引数1, 引数2, ... }
 */


#include <unistd.h>
extern char **environ;

#include <errno.h>
extern int errno;

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <sys/time.h>
#include <signal.h>
#include <fcntl.h>

#include <getopt.h>
extern char *optarg;
extern int optind, opterr, optopt;


#include <stdarg.h>

#include "sha.h"
#include "estp02.h"
#include "llmalloc.h"

#ifndef DEFAULT_GOSH_PATH
#define DEFAULT_GOSH_PATH "@GOSH@"
#endif

/* sessionファイルを置くディレクトリ */
#ifndef DEFAULT_SESSION_DIR
#define DEFAULT_SESSION_DIR "/tmp/speedygosh"
#endif

/* 並列同時起動最大数設定 */
#ifndef DEFAULT_MAX_PROCESSES
#define DEFAULT_MAX_PROCESSES 32
#endif

/* この秒数の間アクセスが無かったら、サーバプロセスを終了する */
#ifndef DEFAULT_TIMEOUT
#define DEFAULT_TIMEOUT 90
#endif

/* 最大実行回数設定 */
#ifndef DEFAULT_MAX_RUNS
#define DEFAULT_MAX_RUNS 1024
#endif

/* エラーログをstderrではなく指定ファイルに書き出すかどうか */
#ifndef DEFAULT_ERRORLOG
#define DEFAULT_ERRORLOG ""
#endif


#define EXITCODE_OK 0
#define EXITCODE_NOT_SHEBANG 1
#define EXITCODE_PROCESS_TOO_MUCH 2
#define EXITCODE_MISC_ERROR 3
#define EXITCODE_INVALID_EXITCODE 4
#define EXITCODE_EMERG 5


/* printf形式のformat
 * 第一引数は--sessiondir
 * 第二引数はスクリプトのtimestampとpathとcwdを結合したもののdigest値
 * 第三引数はuid(違うアカウントから同一スクリプトを動かす時に重複させない対策)
 * 第四引数は同時起動用カウント数値
 */
#define SESSION_PATH_PREFIX_FORMAT "%s/sg_%s_%d_%d"


/* メモリ管理にはこれを使う(今のところ、reentrantでない事に注意) */
static LLMalloc llmalloc_buf;
static LLMalloc *llmalloc = &llmalloc_buf;
#define LLM_INIT() \
  { llmalloc = &llmalloc_buf; llmalloc_table_format(llmalloc); }
#define LLM_MALLOC(size) llmalloc_malloc(llmalloc, size)
#define LLM_FREE(ptr) llmalloc_free(llmalloc, ptr)
#define LLM_FREEALL() llmalloc_table_freeall(llmalloc)



/* speedygosh自体に指定された引数をパーズして得られた設定情報を保持する */
typedef struct _SGArgs {
  char *goshpath;
  char *sessiondir;
  int maxprocesses;
  int maxruns;
  int timeout;
  char *errorlog;
} SGArgs;

/* 実際に実行させるスクリプトとその環境に関する情報を保持する */
typedef struct _SGInfo {
  char *script_path;
  int script_argc;
  char **script_argv;

  uid_t uid;
  char *cwd;
  time_t mtime;
} SGInfo;


/* popen()からpidを取り出す方法が分からないので、自前でpopen_fdandpidを書いた。
 * その返り値として使う、fdとpidの二値がセットになった構造体 */
typedef struct _FdAndPid {
  int fd;
  pid_t pid;
} FdAndPid;


#define CHECK_PATH_AND_RETURN(index) \
  if (access(argv[index], F_OK) == 0) return (index)

/* TODO: speedygosh用の引数をpathとして評価した際に
 *       致命的エラーが発生するかもしれない。
 *       access()を呼ぶ前に、もう少しチェックしておきたいが…… */
int get_script_path_index (int argc, char *argv[]) {
  /* もし引数が異常なら、NULLを返して通知する。 */
  /* とりあえず、argcは最低でも2必要。 */
  if (argc < 2) return 0;
  /* argv[1]かargv[2]がスクリプトファイルのpathなので、それを探す。 */
  CHECK_PATH_AND_RETURN(1);
  /* argv[1]ではなかった。argv[2]を調べる。 */
  if (argc < 3) return 0;
  CHECK_PATH_AND_RETURN(2);
  /* どっちも違った。 */
  return 0;
}

char *my_strdup (char *s) {
  size_t len = strlen(s);
  char *d = LLM_MALLOC(len+1);
  strcpy(d, s);
  d[len] = 0;
  return d;
}
char *my_strndup (char *s, size_t n) {
  char *d = LLM_MALLOC(n+1);
  strncpy(d, s, n);
  d[n] = 0;
  return d;
}
#define MAX_SHEBANG_ARGC 64
char **make_shebang_args (char *cmd, char *argv_str, int *argc) {
  char **index = (char **)LLM_MALLOC(sizeof(char*)*MAX_SHEBANG_ARGC);
  int index_num = 0; /* index_numがMAX_SHEBANG_ARGC-1を越えたらparse終了 */
  size_t cursor = 0; /* 現在パーズ中の引数の先頭からの位置
                      * (argv_strは引数を一つ取得する毎に更新する) */
  index[index_num++] = cmd; /* 先頭はcmd固定 */
  /* あとは順番にパーズしていく */
  while (1) {
    char c = argv_str[cursor++];
    if (!((c == 0) || (c == ' '))) continue; /* 次の文字を探す */
    /* 区切り文字または終端を発見したので、
     * そこまでの文字列をsplitしてindexに保存する */
    index[index_num++] = my_strndup(argv_str, cursor - 1);
    if (MAX_SHEBANG_ARGC <= index_num) break; /* 限界数に達したので終了 */
    if (c == 0) break; /* 終端であれば終了する */
    /* 次の引数を探す */
    argv_str += cursor;
    cursor = 0;
  }
  *argc = index_num;
  return index;
}

SGArgs *make_sgargs (int argc, char *argv[], int script_path_index) {
  SGArgs *sgargs = LLM_MALLOC(sizeof(SGArgs));
  /* まずデフォルト値を設定する */
  sgargs->goshpath = DEFAULT_GOSH_PATH;
  sgargs->sessiondir = DEFAULT_SESSION_DIR;
  sgargs->maxprocesses = DEFAULT_MAX_PROCESSES;
  sgargs->timeout = DEFAULT_TIMEOUT;
  sgargs->errorlog = DEFAULT_ERRORLOG;
  sgargs->maxruns = DEFAULT_MAX_RUNS;
  /* shebang引数は特に指定されていないなら、このまま終了していい */
  if (script_path_index != 2) return sgargs;

  /* まず、shebang引数をparseして普通の引数形式に直す必要がある */
  int shebang_argc;
  char **shebang_argv = make_shebang_args(argv[0], argv[1], &shebang_argc);

  static struct option long_opts[] = {
    { "goshpath",     required_argument, NULL, 'g' },
    { "sessiondir",   required_argument, NULL, 'd' },
    { "maxprocesses", required_argument, NULL, 'p' },
    { "maxruns",      required_argument, NULL, 'r' },
    { "timeout",      required_argument, NULL, 't' },
    { "errorlog",     required_argument, NULL, 'e' },
    { 0, 0, 0, 0 }
  };
  while (1) {
    int tmpnum;
    int opt_index = 0;
    int c = getopt_long(shebang_argc, shebang_argv, "+g:d:p:r:t:e:",
        long_opts, &opt_index);
    if (c < 0) break;
    switch (c) {
      case 'g':
        /* チェックするとすれば、ファイルの存在チェックぐらいだが、
         * 今のところはチェックは省略する */
        sgargs->goshpath = my_strdup(optarg);
        break;
      case 'd':
        /* チェック無し */
        sgargs->sessiondir = my_strdup(optarg);
        break;
      case 'p':
        tmpnum = atoi(optarg);
        /* 範囲チェックのみ */
        if (tmpnum <= 0) { break; }
        sgargs->maxprocesses = tmpnum;
        break;
      case 'r':
        tmpnum = atoi(optarg);
        /* 範囲チェックのみ */
        if (tmpnum <= 0) { break; }
        sgargs->maxruns = tmpnum;
        break;
      case 't':
        tmpnum = atoi(optarg);
        /* 範囲チェックのみ */
        if (tmpnum <= 0) { break; }
        sgargs->timeout = tmpnum;
        break;
      case 'e':
        /* チェック無し */
        sgargs->errorlog = my_strdup(optarg);
        break;
      case '?':
        break; /* 今のところは、不明な引数は単に無視する */
      default:
        abort(); /* 異常終了 */
    }
  }
  return sgargs;
}

#define GETCWD_BLOCKSIZE 256
char *getcwd_safe (void) {
  int counter = 0;
  size_t bufsize = GETCWD_BLOCKSIZE;
  while (1) {
    char *buf = (char *)LLM_MALLOC(bufsize);
    if (buf == NULL) break;
    char *r = getcwd(buf, bufsize);
    if (r != NULL) return r;
    if (16 < counter) break;
    LLM_FREE(buf);
    bufsize += GETCWD_BLOCKSIZE;
    counter++;
  }
  perror("cannot get cwd");
  exit(EXITCODE_MISC_ERROR);
  /* NOTREACHED */
}

time_t get_script_mtime (char *path) {
  struct stat s;
  int stat_r = stat(path, &s);
  /* TODO: stat_rのチェック */
  return s.st_mtime;
}

SGInfo *make_sginfo (int original_argc, char *original_argv[],
    int script_path_index) {
  SGInfo *sginfo = LLM_MALLOC(sizeof(SGInfo));
  char *script_path = original_argv[script_path_index];
  sginfo->script_path = script_path;
  sginfo->script_argc = original_argc - script_path_index;
  sginfo->script_argv = original_argv + script_path_index;
  sginfo->uid = getuid();
  sginfo->cwd = getcwd_safe();
  sginfo->mtime = get_script_mtime(script_path);
  return sginfo;
}


char num2hexchar (unsigned char n) {
  if (n < 10) {
    return (n + '0');
  }
  else {
    return (n - 10 + 'a');
  }
}

char *get_digested_str (SGArgs *sgargs, SGInfo *sginfo) {
  SHA_CTX ctx;
  SHAInit(&ctx);
  /* スクリプトのpathとcwdとtimestampを\0でjoinしたもののdigest値を取る */
  SHAUpdate(&ctx, sginfo->script_path, strlen(sginfo->script_path) + 1);
  SHAUpdate(&ctx, sginfo->cwd, strlen(sginfo->cwd) + 1);
  SHAUpdate(&ctx, (unsigned char *)&sginfo->mtime, sizeof(sginfo->mtime));
  unsigned char digest[20];
  SHAFinal(digest, &ctx);
  /* digestをhexifyする */
  char *result = (char *)LLM_MALLOC(41); /* ここに結果を保存する */
  if (result == NULL) return NULL;
  int i;
  for (i = 0; i < 20; i++) {
    result[i*2] = num2hexchar(digest[i] >> 4);
    result[(i*2)+1] = num2hexchar(digest[i] & 0x0f);
  }
  result[40] = 0;

  return result;
}



char *get_session_path_prefix (SGArgs *sgargs, SGInfo *sginfo,
    char *digested_str, int count) {
  size_t len = 256;
  while (1) {
    char *result = LLM_MALLOC(len + 1);
    if (result == NULL) return NULL;
    int r = snprintf(result, len, SESSION_PATH_PREFIX_FORMAT,
        sgargs->sessiondir, digested_str, sginfo->uid, count);
    if (len < r) {
      /* 出力が切り詰められた。lenを増やして再実行する。 */
      LLM_FREE(result);
      len += 256;
      if (2048 <= len) return NULL;
      continue;
    }
    return result;
  }
  /* NOTREACHED */
}



/* シグナル受信フラグ関連 */
/* ToDo: 複数のシグナルに対応できるように、キューや配列にすべき？ */
static int received_signal; /* 0またはシグナル番号 */

void sg_signal_reset (void) {
  received_signal = 0;
  return;
}

void sg_signal_keeper (int signal) {
  received_signal = signal;
  return;
}

void sg_signal_rewinder (void) {
  if (received_signal == 0) return; /* シグナル無し */
  if (received_signal == SIGCHLD) return; /* SIGCHLDは処理しない */
  kill(getpid(), received_signal);
  return;
}





#define DEFINE_GET_HOGE_PATH(funcname, suffix) \
  char *funcname (char *session_path_prefix) { \
    size_t session_path_size = strlen(session_path_prefix); \
    size_t bufsize = session_path_size + sizeof(suffix); \
    /* session_path_sizeはstrlenなので\0含まないサイズ、 \
     * sizeof(suffix)は\0含むサイズ、なので合計でぴったりになる */ \
    char *newpath = (char *)LLM_MALLOC(bufsize); \
    /* TODO: LLM_MALLOCがNULLを返した時の対応 */ \
    strcpy(newpath, session_path_prefix); \
    strcpy(&(newpath[session_path_size]), suffix); \
    return newpath; \
  }
DEFINE_GET_HOGE_PATH(get_lock_path, ".lock");
DEFINE_GET_HOGE_PATH(get_sock_path, ".sock");
DEFINE_GET_HOGE_PATH(get_exit_path, ".exit");
DEFINE_GET_HOGE_PATH(get_stderr_path, ".stderr");





int open_with_lock (char *lock_path, int blocking) {
  /* とりあえずファイルをw系で開き、ロックを行う。
   * ファイルをopenできなかったり、ロックに失敗した場合はマイナス値を返す。
   * 尚、正常にロックできた場合はロックファイルのfdを返すので、
   * 適切な段階でcloseを行う必要がある事に注意しなくてはならない。
   * (open失敗時はそもそもclose不要。ロック失敗時は自分でcloseして-1を返す) */
  struct flock fl;
  fl.l_type = F_WRLCK;
  fl.l_whence = SEEK_SET;
  fl.l_start = 0;
  fl.l_len = 0;
  fl.l_pid = getpid();
  int lock_fd = open(lock_path, O_WRONLY | O_CREAT, S_IRWXU);
  if (lock_fd < 0) return lock_fd;
  int locked = fcntl(lock_fd, (blocking ? F_SETLKW : F_SETLK), &fl);
  /* ロックに失敗したら、closeして終了 */
  if (locked < 0) {
    close(lock_fd);
    return -1;
  }
  return lock_fd;
}



int get_exit_code (char *exit_path) {
  /* まずファイルをopenしようとしてみる */
  FILE *fp = fopen(exit_path, "r");
  /* openに失敗した時は、exitファイルが生成されなかったとみなし、0扱いとする */
  if (fp == NULL) return 0;
  /* fpを読み取る */
  int exit_code;
  int r = fscanf(fp, "%d", &exit_code);
  if (r == 0) {
    /* 不正な書式だった。 */
    exit_code = EXITCODE_INVALID_EXITCODE;
  }
  fclose(fp);
  return exit_code;
}

#define BUF_LEN 2048
void output_stderr_from_file (char *stderr_path) {
  /* まずファイルをopenしようとしてみる */
  FILE *fp = fopen(stderr_path, "r");
  /* openに失敗した時は、stderrファイルが生成されなかった、つまり、
   * stderrには何も出力されなかったという事で、何もせず終了してよい */
  if (fp == NULL) return;
  /* fpから読めるもの全てをstderrへと吐き出す */
  char buf[BUF_LEN];
  while (1) {
    size_t read_size = fread(buf, 1, BUF_LEN, fp);
    if (0 < read_size) fwrite(buf, 1, read_size, stderr);
    if (feof(fp)) break;
    if (ferror(fp)) break;
  }
  fclose(fp);
  return;
}



char *get_goshcmd (char *session_path_prefix, SGArgs *sgargs,
    SGInfo *sginfo) {
  /* 次のようなコマンドになる。
   * gosh -b -uspeedygosh.server-estp -Espeedygosh-server-boot -Eexit -- \
   * script-file session-path-prefix timeout maxruns errorlog
   */
  size_t cmd_size = strlen(sgargs->goshpath)
    + strlen(sginfo->script_path)
    + strlen(session_path_prefix)
    + 10 /* strlen(sprintf("%d", sgargs->timeout)) */
    + 10 /* strlen(sprintf("%d", sgargs->maxruns)) */
    + strlen(sgargs->errorlog)
    + 128;
  /* ↑余分な部分は適当。将来コマンド引数が変更になった場合、これが問題に
   *   なる事も考えられるが、それはその時に考える事。 */
  while (1) {
    char *cmd = (char *)LLM_MALLOC(cmd_size + 1);
    if (cmd == NULL) return NULL;
    int r = snprintf(cmd, cmd_size,
        "%s -b -uspeedygosh.server-estp -Espeedygosh-server-boot -Eexit -- "
        "%s %s %d %d %s",
        sgargs->goshpath,
        sginfo->script_path,
        session_path_prefix,
        sgargs->timeout,
        sgargs->maxruns,
        sgargs->errorlog);
    if (cmd_size < r) {
      LLM_FREE(cmd);
      cmd_size += 256;
      if (2048 <= cmd_size) return NULL;
      continue;
    }
    return cmd;
  }
  /* NOTREACHED */
}


#define PIPE_R (0)
#define PIPE_W (1)

FdAndPid popen_fdandpid (char *cmd) {
  /* ここに結果を入れて返す
   * (エラーの場合はresult_fap.fdをマイナスにして返す事) */
  FdAndPid result_fap;

  /* 無名パイプを生成する */
  int pfd[2];
  int r = pipe(pfd);
  if (r < 0) {
    perror("pipe");
    result_fap.fd = -1; /* 失敗を示す値を入れて返す */
    goto RETURN;
    /* NOTREACHED */
  }

  /* forkする前に、念の為、stdoutだけflushしておく */
  fflush(stdout);

  /* forkする */
  pid_t pid_child = fork();
  if (pid_child < 0) {
    perror("fork");
    result_fap.fd = -1; /* 失敗を示す値を入れて返す */
    goto RETURN;
    /* NOTREACHED */
  }
  else if (pid_child == 0) {
    /* 子プロセス */
    /* read側をcloseする */
    close(pfd[PIPE_R]);
    /* 自分のstdoutをpipeに変更する */
    dup2(pfd[PIPE_W], STDOUT_FILENO);
    /* setsidの為に、二重forkする */
    pid_t pid_grandchild = fork();
    if (pid_grandchild < 0) {
      /* fork失敗。PIPEをcloseして終了する。 */
      close(STDOUT_FILENO);
      abort();
    }
    else if (pid_grandchild == 0) {
      /* 孫プロセス。 */
      /* setsidする(成功するまで再試行する)
       * ToDo: 一定回数の間に成功しなかったらエラー終了すべき？ */
      while (setsid() == -1) {
        /* usleep emulation (it does not work on windows) */
        struct timeval tv;
        tv.tv_sec = 0;
        tv.tv_usec = 100000; /* 0.01 sec */
        select(0, NULL, NULL, NULL, &tv);
      }
      /* PIPE経由で自分自身のpidを送る */
      write(STDOUT_FILENO, &pid_grandchild, sizeof(pid_t));
      /* PATH以外の環境変数を全クリアする
       * ……必要があったが、とりあえず今はこの処理は不要になった
       * (詳細はgauche/speedygosh/server-estp.scmを参照) */
#if 0
      setenv("PATH", "", 0); /* fallback */
      char *old_path = getenv("PATH");
      char *new_path = my_strdup(old_path);
      clearenv();
      setenv("PATH", new_path, 1);
#endif
      /* note: 返り値のチェックは省略する事にする
       *       (失敗しても大きな問題は無い為) */
      /* cmdをexecする。 */
      /* ToDo: あとでshに頼らないように直す事。少し高速化できる。 */
      execlp("sh", "sh", "-c", cmd, (char *)NULL);
      /* execに失敗したら何もせず終了する。 */
      perror("exec");
      abort();
      /* NOTREACHED */
    }
    else {
      /* 孫プロセスの起動に成功した子プロセス。
       * 孫がsetsidできるように、即座に終了する。*/
      _exit(0);
    }
    /* NOTREACHED */
  }
  else {
    /* 親プロセス */
    /* write側をcloseする */
    close(pfd[PIPE_W]);
    /* pipeから孫のpidを取り出す */
    pid_t pid_grandchild;
    /* ブロッキングモードの筈なので、読めるまで待たされる筈なので、
     * race conditionは起こらない筈…… */
    ssize_t siz = read(pfd[PIPE_R], &pid_grandchild, sizeof(pid_t));
    if (siz != sizeof(pid_t)) {
      /* pidの読み込みに失敗。 */
      result_fap.fd = -1; /* 失敗を示す値を入れて返す */
      goto RETURN;
    }
    /* 結果領域に結果を保存して返す */
    result_fap.pid = pid_grandchild;
    result_fap.fd = pfd[PIPE_R];
  }

RETURN:
  return result_fap;
}



/* 返り値の仕様:
 *  0: プロセスが正常に起動し、パイプが切断された。
 * -1: SIGCHLDが流れた(実際の処理は、この関数を抜けた後でどうにかする)
 * -2: サーバが起動する前にSIGINT等が流れた
 *     (呼び出し側は、サーバが生成するかもしれないsocketをunlinkする事)
 */
int pipe_wait (int server_fd) {
  /* パイプが切断されるのをselectで待つ
   * (このselectはtimeout無しで行う為、必要ならシグナル受信もする事) */

  /* fd_setを生成する */
  fd_set readfds;
  FD_ZERO(&readfds);
  FD_SET(server_fd, &readfds);

  /* nfdsを生成する */
  int nfds = server_fd + 1;

  /* selectを実行する */
  /* note: 最初は、PIPEを閉じるだけで良いと思っていたが、どうも、
   *       何らかのデータを送らないと反応しないようだ。
   *       サーバ側で、データを送るように修正を行った。 */
  int r = select(nfds, &readfds, NULL, NULL, NULL);
  /* rを確認する
   * (尚、timeoutを設定していないので、rは0にはならない)
   * selectがSIGCHLDで終了したのか、
   * SIGINT等で終了したのか、
   * fdがEOF読み取り可能になって終了したのか判別しなくてはならない。 */
  if (0 < r) {
    /* fdが読み取り可能(またはEOF)になった。
     * この状況になるのは二パターンある。
     * サーバ起動が正常に完了したか、
     * サーバ起動に失敗してサーバプロセスは異常終了したか。
     * 正常に終了したならserver_fdからは改行が読み取れる。
     * 異常終了ならEOFが読み取れる。
     * server_fdをreadした結果が0かどうかで、どちらなのかを判定する。
     */
    char dummy;
    return read(server_fd, &dummy, 1) ? 0 : -1;
  }
  /* 何らかのシグナルが流れたか、異常終了した。 */
  if (errno == EBADF) {
    /* race conditionにより、selectする前にfdが閉じてしまったものと思われる。
     * SIGCHLDが流れていないなら正常終了扱いとする。 */
    return (received_signal == SIGCHLD) ? -1 : 0;
  }
  if (errno == EINTR) {
    /* SIGCHLDかその他のシグナルが流れた。 */
    if (received_signal == SIGCHLD) return -1; /* SIGCHLD */
    /* それ以外の終了を促すシグナル等の場合は厄介。
     * まだサーバ側は起動していないので、このまま続行する訳にはいかない。
     * 起動途中のサーバを殺し、ソケットを削除してから、-1を返す必要がある。
     * しかし、その処理は呼び出し側に任せる。
     * (スクリプトファイルのeval時に無限ループに入ってしまった時などに
     *  この状態になる事が考えられる為、これへの対策は絶対に必要。)
     */
    return -2;
  }
  /* その他のエラー。非常事態。 */
  perror("error occurred in select pipe");
  exit(EXITCODE_EMERG);
  /* NOTREACHED */
}

int server_boot_and_wait (char *session_path_prefix,
    SGArgs *sgargs, SGInfo *sginfo) {
  /* goshコマンドをパイプ起動する */
  char *cmdstr = get_goshcmd(session_path_prefix, sgargs, sginfo);
  FdAndPid server_fap = popen_fdandpid(cmdstr);
  if (server_fap.fd < 0) {
    /* gosh実行自体に失敗した。 */
    return -1;
  }
  /* パイプが切断されるかシグナルが流れるのを、selectで待つ */
  int r = pipe_wait(server_fap.fd);
  if (r == -2) {
    /* SIGCHLD以外のシグナルが流れて中断された場合のみ、
     * この時点でサーバプロセスをkillしておく */
    kill(server_fap.pid, SIGKILL);
  }
  /* 正常完了時とSIGCHLD時は、特に何も行わずに、
   * pipe_waitの返り値をそのまま返せばよい */
  /* 後始末を行う */
  close(server_fap.fd);
  return r;
}




#define SOLVER_RETRY 0
#define SOLVER_DONE 1
#define SOLVER_ERROR -1
int main_solver(char *session_path_prefix, SGArgs *sgargs,
    SGInfo *sginfo, int *exit_code_ref) {
  int rv = 0;
  /* note: この関数は、sg_with_signal_keeper越しに呼ばれる必要がある。
   *       sg_with_signal_keeper内では、受信したシグナルは一旦
   *       received_signalに保存され、sg_with_signal_keeperを抜ける直前に
   *       再度実行される。
   *       その為、sg_with_signal_keeper内では、received_signalを参照する事で、
   *       シグナルの有無と種類を確認する事ができる。
   */
  char *lock_path = get_lock_path(session_path_prefix);
  int locked_fd = open_with_lock(lock_path, (sgargs->maxprocesses == 1));
  /* ロックできなかったら、次を検索する */
  if (locked_fd < 0) {
    rv = SOLVER_RETRY;
    goto RETURN;
    /* NOTREACHED */
  }
  /* ロックできた。もし古い一時ファイルが残っているならこの時点で消しておく */
  char *exit_path = get_exit_path(session_path_prefix);
  char *stderr_path = get_stderr_path(session_path_prefix);
  unlink(exit_path);
  unlink(stderr_path);
  /* ソケットファイルの有無を調べる */
  char *sock_path = get_sock_path(session_path_prefix);
  int socket_is_not_exists = access(sock_path, F_OK);
  if (socket_is_not_exists) {
    /* サーバを起動し、socketが通信可能になるまで待つ */
    int r = server_boot_and_wait(session_path_prefix, sgargs, sginfo);
    if (r < 0) {
      /* 何らかのシグナルが流れた。 */
      if (r == -2) {
        /* SIGCHLDではなく、途中終了を促すようなシグナルが流れた。
         * サーバプロセスはserver_boot_and_wait内でkillされる筈なので、
         * ここでは残っているかもしれないsocketをunlinkする。 */
        unlink(sock_path);
      }
      fprintf(stderr, "failed to boot to speedygosh server process.\n");
      /* 何にせよ、エラーを返し、アンロックする必要がある。 */
      rv = SOLVER_ERROR;
      goto UNLOCK;
      /* NOTREACHED */
    }
  }
  /* ソケットとestp通信を行い、結果を得る */
  /* note: ここはまだsg_with_signal_keeper内なので、
   *       シグナルが流れても保留にされる。
   *       しかし、この段階に入ったらシグナルによる中断は
   *       許可されるべきように思える。
   *       どうすれば良い？
   *       今、estp02.cのコードを見たところ、
   *       EINTRを受けると、どのシグナルであっても
   *       perrorしつつ即座に終了するコードになっているように思える。
   *       なので、それなら問題なさそうに思える。
   *       (但し、select中のシグナルの挙動が自分の予想と違う場合はアウト) */
  int r = estp02_comm(sock_path,
      sginfo->script_argc, sginfo->script_argv, environ);
  if (r < 0) {
    /* estp通信、つまり実際に行いたい処理がエラーになった。 */
    rv = SOLVER_ERROR;
  }
  else {
    /* estp通信、つまり実際に行いたい処理が正常終了した。 */
    rv = SOLVER_DONE;
  }

FULLCLEANUP:
  {
    /* 後始末を行う */
    /* exit_codeの取得と保存 */
    *exit_code_ref = get_exit_code(exit_path);
    /* stderrの取得 */
    output_stderr_from_file(stderr_path);
    /* 各種ファイルの削除 */
    unlink(exit_path);
    unlink(stderr_path);
  }

UNLOCK:
  /* ロックファイルをcloseする */
  unlink(lock_path);
  close(locked_fd);

RETURN:
  return rv;
}


typedef void (*sighandler_t)(int);
#define UPDATE_SIGHANDLER(var, signum) \
  sighandler_t var = signal(signum, sg_signal_keeper)
#define RESTORE_SIGHANDLER(var, signum) \
  if (var != SIG_ERR) signal(signum, var)
int sg_with_signal_keeper (char *session_path_prefix, SGArgs *sgargs,
    SGInfo *sginfo, int *exit_code_ref) {
  /* note: 以下のシグナルを保留する。
   * SIGINT, SIGQUIT, SIGALRM, SIGTERM, SIGUSR1, SIGUSR2,
   * SIGCONT, SIGTSTP,
   */
  /* 初期化 */
  sg_signal_reset();

  /* 現在のシグナルハンドラの状態を保存しつつ、
   * 各シグナルハンドラをsg_signal_keeperで上書きする */
  UPDATE_SIGHANDLER(old_sigint,  SIGINT);
  UPDATE_SIGHANDLER(old_sigquit, SIGQUIT);
  UPDATE_SIGHANDLER(old_sigalrm, SIGALRM);
  UPDATE_SIGHANDLER(old_sigterm, SIGTERM);
  UPDATE_SIGHANDLER(old_sigusr1, SIGUSR1);
  UPDATE_SIGHANDLER(old_sigusr2, SIGUSR2);
  UPDATE_SIGHANDLER(old_sigcont, SIGCONT);
  UPDATE_SIGHANDLER(old_sigtstp, SIGTSTP);

  /* main_solverを実行 */
  int r = main_solver(session_path_prefix, sgargs, sginfo, exit_code_ref);

  /* シグナルハンドラを元に戻す */
  RESTORE_SIGHANDLER(old_sigint,  SIGINT);
  RESTORE_SIGHANDLER(old_sigquit, SIGQUIT);
  RESTORE_SIGHANDLER(old_sigalrm, SIGALRM);
  RESTORE_SIGHANDLER(old_sigterm, SIGTERM);
  RESTORE_SIGHANDLER(old_sigusr1, SIGUSR1);
  RESTORE_SIGHANDLER(old_sigusr2, SIGUSR2);
  RESTORE_SIGHANDLER(old_sigcont, SIGCONT);
  RESTORE_SIGHANDLER(old_sigtstp, SIGTSTP);

  /* keepしてあるシグナルがあるなら、改めて流す */
  sg_signal_rewinder();

  return r;
}

void dump_sgargs (SGArgs *sgargs) {
  printf("* sgargs dump *\n");
  printf("goshpath: %s\n", sgargs->goshpath);
  printf("sessiondir: %s\n", sgargs->sessiondir);
  printf("maxprocesses: %d\n", sgargs->maxprocesses);
  printf("timeout: %d\n", sgargs->timeout);
  printf("maxruns: %d\n", sgargs->maxruns);
  printf("errorlog: %s\n", sgargs->errorlog);
  printf("\n");
  return;
}

void dump_sginfo (SGInfo *sginfo) {
  printf("* sginfo dump *\n");
  printf("script_path: %s\n", sginfo->script_path);
  printf("script_argc: %d\n", sginfo->script_argc);
  int i;
  for (i = 0; i < sginfo->script_argc; i++) {
    printf("script_argv[%d]: %s\n", i, (sginfo->script_argv)[i]);
  }
  printf("uid: %d\n", sginfo->uid);
  printf("cwd: %s\n", sginfo->cwd);
  printf("mtime: %d\n", (int)(sginfo->mtime));
  printf("\n");
  return;
}

int main_loop (char *digested_str, SGArgs *sgargs, SGInfo *sginfo) {
  int exit_code = 0; /* このプロセスの終了コード。main_solverが書き換える */
  int count = 0; /* 同時起動最大数設定まで繰り返す為のカウンタ */

  /* まず--sessiondirの実在を調査し、存在していない時は
   * ディレクトリをmkdirし、chmod a+rwxtするようにする。
   * (--sessiondir自体は複数のユーザから書き込みokとしたい為)
   * 既にディレクトリが存在していた時にはchmod 777等は行わない。 */
  if (access(sgargs->sessiondir, F_OK)) {
    mkdir(sgargs->sessiondir, 01777);
    chmod(sgargs->sessiondir,
        S_ISVTX
        | S_IRUSR | S_IWUSR | S_IXUSR
        | S_IRGRP | S_IWGRP | S_IXGRP
        | S_IROTH | S_IWOTH | S_IXOTH
        );
    /* 再度確認 */
    if (access(sgargs->sessiondir, F_OK)) {
      fprintf(stderr, "cannot create sessiondir %s\n", sgargs->sessiondir);
      return EXITCODE_MISC_ERROR;
    }
  }

  /* note: ここの処理がどうも直感的でない。
   *       しかし、ロックチェックとその解放の関係上、この構造が一番
   *       適切なようにも思える。
   *       他のところを作り終わってから、余裕があったら考え直す。
   *       (つまり、おそらくずっとこのまま) */
  while (1) {
    if (sgargs->maxprocesses <= count) {
      /* プロセス数多過ぎ。エラー終了する */
      fprintf(stderr, "%s: processes too much or bad sessiondir\n",
          sginfo->script_path);
      return EXITCODE_PROCESS_TOO_MUCH;
    }
    char *session_path_prefix = get_session_path_prefix(sgargs, sginfo,
        digested_str, count);
    int r = sg_with_signal_keeper(session_path_prefix, sgargs, sginfo,
        &exit_code);
    /* rの値で処理を分岐する。
     * - 0<rならdone。
     * - r<0ならerror。
     * - r=0ならretry。
     */
    if (0 < r) {
      /* r = 1 : done */
      /* note: 基本的なterminate処理はmain_solver内で済ませておくものとする */
      /* main_solverが書き換えた筈のexit_codeを返す */
      return exit_code;
    }
    else if (r < 0) {
      /* r = -1 : error */
      /* note: 上と同じく、基本的なterminate処理は
       *       main_solver内で済ませておくものとする */
      return EXITCODE_MISC_ERROR;
    }
    /* r = 0 : retry */
    count++;
  }
  /* NOTREACHED */
}

int main2 (int argc, char *argv[]) {
  /* 最初に、argcとargvを調べて、shebang起動である事を確認しつつ、
   * script_path_indexを取得する */
  int script_path_index = get_script_path_index(argc, argv);
  if (!script_path_index) {
    fprintf(stderr,
        "%s must be used by top of script-file with #!\n", argv[0]);
    return EXITCODE_NOT_SHEBANG;
  }

  /* 引数から設定を取得する */
  SGArgs *sgargs = make_sgargs(argc, argv, script_path_index);

  /* 今回の実行に必要な情報を取得する */
  SGInfo *sginfo = make_sginfo(argc, argv, script_path_index);

  /* ダイジェスト文字列を得る */
  char *digested_str = get_digested_str(sgargs, sginfo);

#if 0
  dump_sgargs(sgargs);
  dump_sginfo(sginfo);
#endif
  return main_loop(digested_str, sgargs, sginfo);
}


int main (int argc, char *argv[]) {
  /* とりあえず、SIGPIPEだけは常に無視する設定にしておく */
  signal(SIGPIPE, SIG_IGN);
  /* SIGCHLDも常に無視する設定にしておく事になった */
  signal(SIGCHLD, SIG_IGN);
  /* LLM初期化 */
  LLM_INIT();

  int r = main2(argc, argv);

  /* LLM解放 */
  LLM_FREEALL();

  return r;
}



/* vim:set ft=c sw=2 ts=2 sts=2 et: */
