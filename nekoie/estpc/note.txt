

つくるもの
- url mapperer(仮)
- sock2gosh(仮/gosh以外でも利用できそうなので名前を考える事)
- speedygosh
- sock2gosh, speedygoshのプロジェクトページ


sock2gosh
- これを最初につくる。
- 仕様はこのファイルの通り。
- 三部分に分かれる。
-- Cのコード(クライアント部分)を吐くユーティリティ関数(コンパイルも含むかも)。
-- サーバモジュール。
-- pause機能等のモジュール。
- プロジェクト名を考え直す
-- lmpc = Lisp Machine Process Client
-- lvmpc = Lisp VM Process Client
-- ldpc = Lisp Daemon Process Client
-- estpc = Environ and Stdio Transfer Protocol Client
- tir03.socket.serverの拡張
-- pauseが引数を取るようにする
-- select時に、複数のクライアントがaccept状態になった際の優先順位を管理する
   テーブル(キュー)を追加
   (pauseの待ち秒数管理や、(pause 0)時にキューの最後尾に入れる等の為)











vport問題は、vportを使わずに、素のsocket portを使う事で回避し、
素のcgiと互換性を保つ。
この際の問題点はドキュメンテーションで回避する事にする。
sleep代わりのpauseは提供する。

socket接続に失敗した時のfallbackは、
リダイレクトだけではなく、任意のコマンドをexecできるようにする。
(リダイレクトは、execの特殊系として実装？)





問題点
- 現状では、完全にはcgiコンパチにはならさそう
-- サーバ側にtir03.socket.serverを使うとして、
   現状のtir03.socket.serverは入出力がportではないので、
   完全にコンパチにはならない
--- 何とかする方法は無いか？
---- 元々、vportとcall/ccの相性が悪い為の折衷案として現在の形式を採用したので、
     どうにもならなさそう。
---- delegateっぽく作る事は無理か？
----- ちょっと考えた限りでは無理っぽそうだが……。




そもそも、何故、tir03.socket.serverではvportが使えないのか、
そもそも、どういう事をしたかったのか、
その辺から考え直してみる。

- やりたかった事
-- call/ccによる協調スレッド動作をするソケットサーバ。
   socketをreadする時に、socketからデータを取得できなかったら、
   自動的にデータが来るまでsleep状態になり、他のコルーチンに制御を渡せる為、
   継続を意識しないですむソケットサーバ。

- 何故vportが使えないのか
-- vportインスタンス内に設定できる各種ハンドラが呼び出される段階では、
   C(で書かれているvport)のレイヤをまたいでいる為、そこで継続のextentが切れ、
   辿れないから。
   そして、前述の条件により、call/ccが使われるのはvportの内部。
   よって、これは動作しない。

- 現在の回避方法
-- ソケットのportを直接ユーザに見せる事は諦め、
   ソケットのportを読み書きする為の専用の手続きを用意し、
   その手続きの中でcall/ccを使うようにした。
   つまり、vportの使用を諦めた。

- 他に解決策はある？
-- まず、前提条件として、vportは使いたい。
   理由は、CGIとのコンパチを保ちたい為。
-- gaucheを改造して、read/write系関数をどうにかする。大変そうだ。
--- fastcgiのport等を見てみて、同じように、偽portを作れないか調べてみる。






$Id$
