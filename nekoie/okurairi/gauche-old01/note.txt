#!/usr/local/bin/gosh
;;; coding: euc-jp
;;; -*- scheme -*-
;;; vim:set ft=scheme ts=8 sts=2 sw=2 et:
;;; $Id$

各種のメモ

ログイン処理に必要なテーブル
id->account_info id (loginid password deleted ...) AUTO_INCREMENT
loginid->id loginid id
sessionid->id sessionid (id expire-epoch)


world管理のcgiとdbも用意する事
- 同じように、セッションとアカウント登録部分を使い回す？
- worldは、*.gs-alpha.tir.jpとする
- 登録時に、サブドメイン名を決める
- しかし、誰でも生成できてはいけないので、やっぱり管理画面化はしない
- 代わりに、コマンドラインを用意する
-- worldを作ると、worldの名前のディレクトリと、その中に初期ファイルが作られる
-- creatorのid, pass, subdomainは、この時点で指定
-- 機能は、それだけで良い
-- しかし、あとで、本当の管理コマンドを追加するかも知れない







究極エレメントは二つではなく、四つにする？
- ruler 物理法則を生成/変更する
- generator 情報/物の生成を行う
- tweaker 情報/物のパラメータ変更を行う
- necrologger アカウント管理(削除)を行う。但し、自分のid番号よりも古いidの者を削除する事は出来ない、とする
それぞれ、適当な置き場所を考える事
- 正の実数の無限遠点にgenerator
- 負の実数の無限遠点にnecrologger
- 正の虚数の無限遠点にruler
- 負の虚数の無限遠点にtweaker
それぞれ、

path-info無しのアクセスは、nowhere(場所無し)とする
nowhereには、直接、物(場所)を置く
- nowhereにある物(場所)には、自由に移動できる(nowhereにいる限り)

- 初期creatorはnowhereそのものをスタート地点とする
-- 他アカウントは、初期creatorが設置したcharacter-generatorからスタートする
- 初期creatorが持つべき、最低限必須のスキル/記憶
-- 簡単な説明書き(記憶)
-- nowhereと世界を行き来する(スキル)
--- 何らかの条件をつける必要があるが、どのような条件をつけるかは未定
--- 究極エレメント専用スキルと同じように、nowhereに来た者に、強制的に憶えさせるようにするか？
- nowhereには、物理法則は働かない、とする



子エレメント。四つの究極エレメントと関連している。
- rule (世界の)物理法則。rulerの子。
- action 「物」が実行可能な行動そのもの。「物」は、コレを実行したり、憶えたり、教えたりできる。tweakerの子？
- obj 物。場所も、コレに含める。generatorの子。
- information 知識としての情報。generatorの子。
- path 場所と場所をつなぐ道。仕様未決定。
- class 「物」の種別。仕様未決定。
- contract 義務や権利等の実体。仕様未決定。


mysqldのような、dbm-serverを作る。



宗教的な言葉はなるべく避ける事


gs-placeはgs-existenceの一種とする


gs-existenceが持つ必要のあるパラメータ(上の物ほど優先順位が高い)
- gscid (固有id)
- class (種別) この物の種別を示すシンボルを指定。
- hit (耐久力) 0になると機能停止、マイナスになればなる程修復は困難
- power (電力) 0になると機能停止、簡単に補充可能
- equip-slot (装備スロット)
- ??? (装備スロットに装備された物)
- ??? (可能なアクション一覧)
- algorithm (行動タイプ、及び、知性の有無？)
- full-name (本名) 通常は使われない
- nick-name (通称) 様々な用途に使う
- outer-description (外観詳細) その物の見た目を記述する。テキスト及び、多数のキーワード(S式)で構成。
- alias (シンボリックリンクである事を示す。gscidが入る。その場合、他の情報は全く入れないようにする事)
- knowledge (知識) 行動可能なactionや様々な知識（へのリンク）等
- hit-max (最大耐久力) コレは無しにする？
- power-max (最大電力) コレは無しにする？
- size (大きさ) 移動時等の判定に使用。世界によっては、無しにしても良い
- mass (質量) 世界によっては、無しにしても良い

generatorはgenerator兼untweaker、tweakerはtweaker兼ungeneratorとする？
topは正の無限遠点、bottomは負の無限遠点とする
worldは、空間も含む。

全ての単位はtweak可能とする。

top/bottomのpathはどうする？？？「worldが"/"」というのは譲りたくない。
- 何らかの、path_infoに頼らない、指定方法が必要。

とりあえず、magic-numberで固有/必須の物を仮に決めておく。

# 00000000 : class_void/void (用意するか未定/どのような定義にするかも未定)
# 00000001 : class_existence (全ての存在のベースクラス。一応用意。)
# 00000000 : class_rule (全ての法則のベースクラス。ruleは全ての物に影響する)
# 00000000 : class_info (全ての情報のベースクラス。infoはコピー可能な鍵として使える)
# 00000000 : class_creature (全ての物のベースクラス)

# 00000000 : top (スタート時のgenerator置き場)
# 00000000 : bottom (スタート時のtweaker置き場)

# 00000000 : generator
# 00000000 : tweaker
# 00000000 : creator

# 00000000 : primal_creators_knowledge (説明書)
# 00000000 : world (最初は用意せず、creatorに作らせる)

# 00000000 : reserved
# 00000000 : reserved
# 00000000 : reserved
# 00000000 : reserved


* gs世界自体について
- "/"は、この世界自体とする。
-- ココに置かれた物は、この世界から切り離される。
- 全ての者のベースクラスはexistenceとする(情報等もコレに含まれる)。
- "/"は、各種の固有のパラメータを持つ。
- "/"には、固有二種の特別な存在、
-- generator(仮) 創造の源。コレに触れた者は、create, tweakを憶える。名前の初期値はランダムに決定される。generatorのcreateは、基本的には、高階関数的な「make-maker」を作る。generator自体は、電力を消費しない。武器としても使える？？？
-- tweaker(仮) logosの機能を一時的に封印する。所持するだけで良い。コレに触れた者は、nullificate, untweakを憶える。効果範囲はvoidの一定範囲内(voidの存在するエリア全体？)。名前の初期値はランダムに決定される。tweaker自体は、電力を消費しない。盾的なものとしても使える？？？
-- top(仮) 天。generatorは最初ココにある。
-- world(仮) 世界。"/"。topとbottomの間にある。creatorは最初、ココから開始する。
-- bottom(仮) 底。tweakerが置いてある。
-- creator(仮) 創造者。最初にアカウントを作った者。full-nameが無い事以外は、他のアカウント所有者と違いは無い。
- 四種の汎用存在が存在可能。
-- creature(仮) 物/生物/場所、等。
-- class(仮) creatureの種別。creatureはclassを一つのみ持つ。classは別の複数のclassから移譲して作られる。
-- rule(仮) この世界に働く、物理法則、及び、係数、等。
-- information(仮) 各種の情報の本体。コレのリンクを持っている事が、それを「知っている」という事になる。
-- contract(仮) 義務や権利などの実体。コレのリンクを持っている事が、「権利を持っている」という事になる。
-- action(仮) 行動の実体。コレのリンクを持っている事が、「特定の行動を行う事が出来る」という事になる。但し、「特定アイテムが必要」等、他の条件が必要な事も多い。


まずは、概念に名前を付ける事。

独特の名付けが必要な概念
- このシステム自体の名前
-- gs
- (閉じた)世界
-- gs界
--- 但し、gs世界は複数存在し(行き来は出来ないものの)、(区別の為に)それぞれに
    固有の名前を付ける必要がある
---- とりあえず、ココは「第一gs界」とする
---- 漢字二文字にしたいが…‥筒井康隆の驚愕の曠野みたいに。
- プレイヤーが操作するキャラクタ(PC)
-- gs-agent
- プレイヤーが操作しないキャラクタ(NPC)
-- gs-agent
- プレイヤーのアカウント
-- gsアカウント
- （物が動く為に必要な）エネルギー


定義

- gs-path
-- 一つのgs-creatureから、もう一つのgs-creatureへとつながる道
-- 基本的に一方通行。双方向の場合はgs-pathを二つ用意する
-- 行き先が「見える」かどうかのフラグを持つ
-- 上記フラグとは別に、行き先へと「移動可能」かどうかのフラグを持つ
-- そこから「移動可能な」別の場所のリストを持つ
-- そのgs-pathに「入る」為に条件があっても良い(条件を持たない者は入れない)
-- シンボリックリンク、ハードリンク的に、別名を持つ事が出来る
--- コレによって、簡単に双方向のgs-pathを設定できるようにする
-- 基本的にgs-pathを通り抜けるのは一瞬。
   長い道を表現する場合は、そのようなgs-placeとgs-pathの組を沢山用意する
-- 耐久力(仮)を持つ
-- 温度(仮)を持つ
-- 大きさ(仮)を持つ
- gs-creature
-- uniqueなidを持つ
-- 型(存在としてのクラス)を持つ？
   種々の理由により、できる限り、oop的な「クラス」は実装したくない。
-- どのスロットを占有するのか、のリストを持つ？
-- 各種のスロットを複数持つ
--- union的なスロットはどう実現する？
---- diablo等のアイテム入れのような感じの物を実現したいが…‥
---- 例えば「手」も万能スロットの一つだが、どう実現する？
--- スロットには別のgs-creatureが入る
---- 再帰を許可する？？？
-- アクション(メソッド的なもの)を持つ
-- 行動タイプを持つ
-- 電力(仮)を持つ
-- 耐久力(仮)を持つ
-- 温度(仮)を持つ
-- 質量(仮)を持つ
-- 大きさ(仮)を持つ
-- その他、数々のパラメータを持つ
-- スロットに入った際に、親にもたらす影響の種別と量の値等を持つ



図にすると、以下のような状態となる

人間
 |
ブラウザ
 |
(cgiによる)人間用の認証アカウント
 |
(sexp認証による)gs世界のアカウント(及び、アカウント情報)
(これ関連の情報はアカウントマネージャdbmに保存される)
 |
アカウントに結びつけられたキャラクタ
(これ関連の情報はgs世界のdbmに保存される)


問題
- 行動履歴はdbmに保存すべきか
-- すべきではない。履歴専用ログファイルに保存せよ


gs世界dbmの構造
- 「gs-place:」で始まるもの
-- 場所データ
-- そこに何があるか、等を記録する？
-- 場所固有の情報も記録する
-- シンボリックリンク、ハードリンク的なものに対応する必要がある
- 「gs-creature:123456:」で始まるもの
-- gs世界に存在する、あらゆる物質/原子。gs世界の物質は全て「動く」。
   （電力のある限り）
-- 区別の為の固有idを持つ。
-- 詳細情報をalistで記録する
--- 各種のスロット種別を持つ。
--- 各種の固有のスロットを持つ。スロットには別のgs-creatureが入る。
- 「gs-agent:123456:」で始まるもの
-- 何らかの行動を行うagent。
-- 区別の為の固有idを持つ。
-- gs-creatureと結び付いているが、gs-creatureが消滅しても残る？
-- 詳細情報をalistで記録する





「物」は、pathによって指定可能な存在。
「agent/creature」は、pathによって指定可能な存在だが、。


e=mc^2的に、電力から物を生成したり、物を分解して電力にする事を可能とする？


sexp-cs.scmを作る事。


cgiクライアントの挙動定義
:初期化:
S式サーバにプロトコルバージョン取得リクエストを送り、
プロトコルを理解できるかどうかを判定する事。
:共通:
S式サーバにpingを送り、pongを受け取る。
pongを受け取れた場合は、下記のそれぞれの状況に準ずる。
pongが受け取れない場合は、メンテ画面を表示する。
尚、この後10秒程度は、pingをretryしないようにする必要がある。
（pongが受け取れない場合、S式クライアントがボトルネックになる為、
  過アクセスが発生する可能性がある為）
:割符無し/コマンド無し:
割符無しトップページを表示。以下がある
- ログインフォーム
- アカウント登録へのリンク
- 簡単な説明文へのリンク
これらの情報をS式サーバに要求するかどうかは未定。
:割符無し/ログイン要求:
S式サーバにログイン要求を送り、割符を受け取り、
クライアントにセッションクッキーとして渡す。
パスワードエラー等で割符を受け取れなかった場合は、
それらしいエラーを表示する。
S式サーバはエラーの内容をS式クライアントに返す事。
:割符無し/アカウント登録フォーム:
S式サーバから、アカウント登録についてのhelpを送り、必要な情報を受け取り、
:割符有り/閲覧対象無し/コマンド無し:
現在位置へとリダイレクト。
:割符有り/閲覧対象有り/コマンド無し:
現在位置の情報を表示。
プレイヤー情報を表示。
helpを送り、コマンド一覧を受け取り、リンク化して表示。
ログアウトへのリンクを表示。




-- 認証に通るか検証
-- 通ったら、このアカウントは既にcreatureを保持しているか見る
--- 保持していないなら、「キャラクタがありません。作りますか？」画面を出す
---- yesなら作成
---- noならどうする？
-- それらしいログインメッセージを出し、このcreatureの居る現在位置へのhrefを表示



* 以下のアクションを用意
- freeze: ログアウト時等の為に、その場でキャラを凍結する。その場所がどのような状況になろうと、再開時までキャラが影響を受ける事は無い。コスト無し、いつでも可。（何者かに殺されそうになった時の緊急回避に使っても良い、ポリシーが許すなら）
- giveup: キャラクタを放棄する。放棄されたキャラクタは消滅しないが、アカウントとは切り離され、行動タイプが「手動」から「自動(のうちの、状況に適切なタイプ)」に変更される。
- inspect: sexpのviewは、調査対象に影響を与えない「見る」だが、これは、調査対象(と自分自身)に影響を与える「調べる」。何かを得たり、失ったりする可能性がある。

freezeやgiveupはアカウントやログアウト操作に密接な関係があるので、特別扱いした方が良いのかも知れないが…‥どうする？？？




* cgiの本質とは？
- href及びフォームによる柔軟な入力
- コンテンツ(メッセージ)の出力と、そこから派生する再帰的な再入力
- 上記の、再帰的なページ移動の履歴の木構造
- 

どうすれば楽になるか？
- wikiに学ぶ？
-- コンテンツを楽に作成できれば良い(wysiwyg)
-- hrefを楽に指定できれば良い











