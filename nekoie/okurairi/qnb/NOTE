quasi-neural bookmarker


* 要件
- GaucheFestで作るもの(一日で、とりあえず動くところまで持っていく、という事)。
- ウェブアプリ。
- ブックマーク管理CGI、兼、アンテナCGI。


* 結果
- なんか全然、動くものが作れなかった。
-- 恐らく、「作成→動作確認→修正/拡張→動作確認→修正/拡張→……」の軌道に
   上手く乗れなかった為だと思われる。
-- また、目的意識がどうにも薄かった事も問題だったと思われる。
- 次回は、もっと目的を持ち、素早く開発の軌道に乗れるようにする事。
- 一旦諦めて、残りの時間はtir03.cgiのドキュメンテーションに使う事にする。


* 仕様
- 認証システム
-- 独自の認証システムではなく、既存の別個の認証システムを流用させてもらう。
-- 認証システムは、選択可能とする。
--- HTTP basic/digest認証(default/fallback)
--- typekey認証(あとで)
--- その他の認証システム(あとで)
-- 認証されていない場合は、readonlyのanonymous権限とする
- データストレージ管理
-- dbm
--- 大きく分けて、以下のdbmをopenする。
#### sha1digest値からurlを復元する為のテーブル(衝突対策でvalはurlのlistで保持)
#### sha1digest値からurlの属性を読むテーブル
----- このurlの属性値から逆に検索は行わない、という前提。
------ rssのurl等は、urlの属性値として持つが、
       実際のキャッシュそのもの等は含めないようにする
#### url群をグループ化するテーブル(keyは適当なid？、valはurlのlist)
----- グループ化のレベルを考慮する必要がある。
###### 同一と見なせるurl群(aliasやredirect等)
###### 同サイトと見なせるurl群
------- これは、階層構造となるべきかも……
###### 同ジャンルと見なせるurl群
----- 逆引きは考慮しなくて良い(グループ->urlのlist、のみで良い)
----- 違う権限によって別の同名グループが生成される可能性がある為、
      keyには工夫が必要そうだ。
#### 上記の、url群のグループの属性保持テーブル
#### アカウント->アカウントグループid(optional)
----- このテーブルを使わない場合、anonymousを除いた全てのアカウントは
      primaryグループに属する。
#### アカウントグループの属性保持テーブル(optional)
----- このテーブルを使わない場合、primaryグループの属性はdefault値。
#### アカウントグループ->所有しているurlグループ、のテーブル(optional)
----- このテーブルを使わない場合、全てのurlグループを所有している事になる。
#### アンテナ機能の為のurl更新情報及びHTTPデータのキャッシュ
--- urlが保持すべき属性は、以下の通り。
---- 未定
- ブックマーク管理システム
-- 基本的に、上記のグループ単位で管理する。
-- cgiパラメータ無しでアクセスされた時は、以下の挙動とする。
### PATH_INFOメタ変数が無い場合は、該当アカウントで見られる全urlグループの
    一覧を出力。
---- 将来、アンテナとして、更新日時を取得したり、更新順にソートしたり、
     ページングしたりの拡張をする。
---- ページのどこかに、登録フォームへのリンクを出力(anonymous以外)。
### PATH_INFOメタ変数がある場合は、/で分離する。以下のような書式が期待される。
---- qnb.cgi/url-group-id/sub-url-group-id/...
----- これは、特定ジャンルに絞ったlistを出力したい時に出す。




